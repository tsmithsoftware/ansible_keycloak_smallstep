version: '3.9'

services:

  # this container is used as a placeholder for the inventory file
  # the script adds docker containers to the inventory, seems to need something to run against
  python:
    container_name: python
   # image: python
    build: ./python_image/.
    command: tail -f /dev/null
    networks:
      network:
        ipv4_address: 10.5.0.2

# ansible is run on the host
#  ansible:
#    container_name: ansible
#    ports:
#      - "2222:22"
#    image: flaconi/ansible
#    volumes:
#    - ./ansible:/ansible
#    command: bash -c "ansible-galaxy collection install community.docker && tail -f /dev/null"
#    networks:
#      network:
#        ipv4_address: 10.5.0.2

# 1 - this solution requires certificates to be set up correctly. 
# https://smallstep.com/docs/tutorials/docker-tls-certificate-authority/#manual-installation
# used as a CA to allow trust of keycloak certs
# smallstep_ca will be run to generate the root CA fingerprint
  smallstep_ca:
    container_name: ca_holder
    image: smallstep/step-ca
    ports:
      - "6783:6783"
      - "9000:9000"
    stdin_open: true
    tty: true
    command: "tail -f /dev/null"
    networks:
      network:
        ipv4_address: 10.5.0.3
    environment:
      DOCKER_STEPCA_INIT_NAME: Smallstep
      DOCKER_STEPCA_INIT_DNS_NAMES: ca_holder
      DOCKER_STEPCA_INIT_PASSWORD: password
      
# 2 - these container holds the Keycloak instance https://www.keycloak.org/ that we use for auth+auth along with the associated database
  keycloak_db:
    container_name: keycloak_db
    image: 'postgres'
    environment:
      POSTGRES_PASSWORD: password
    healthcheck:
      test: /usr/bin/pg_isready -d postgres -U postgres
      interval: 5s
      timeout: 10s
      retries: 120
    ports:
      - "6000:5432"
    networks:
      network:
        ipv4_address: 10.5.0.4
        
  keycloak:
    container_name: keycloak
    #image: keycloak/keycloak
    build: ./keycloak_image/.
    ports: 
      - "8080:8080"
      - "443:8443" # by default, KC in prod mode listens on 8443
    depends_on:
      - smallstep_ca
      - keycloak_db
    environment:
      DB_VENDOR: "POSTGRES"
      DB_ADDR: keycloak_db
      DB_PORT: 6000
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_USER: user
      KEYCLOAK_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: pass
    command: tail -f /dev/null
    #command: start-dev
    #command: start
    restart: 'unless-stopped'
    networks:
      network:
        ipv4_address: 10.5.0.5
    volumes:
      - ./keycloak_data:/opt/keycloak/data/import

# 3 - This container is the asp.net application we want to use KC with
  aspnet_app:
    container_name: aspnet_app
    image: mono
    networks:
      network:
        ipv4_address: 10.5.0.6
    command: tail -f /dev/null

# 4 - because the KC container is locked down, we need another container to interact with the Step API
  certificate_generator:
    container_name: certificate_generator
    image: jitesoft/step-cli:latest
    networks:
      network:
        ipv4_address: 10.5.0.7
    command: tail -f /dev/null
    depends_on:
      - smallstep_ca
      - aspnet_app

networks:
  network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1
