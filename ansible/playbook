#---
- hosts: all
  tasks:

# containers should be running but won't necessarily be in the inventory
# so we add them here

    - name: add smallstep CA container to inventory
      add_host: 
        name: ca_holder
        ansible_connection: docker
      changed_when: false

    - name: add keycloak container to inventory
      add_host:
        name: keycloak
        ansible_connection: docker
      changed_when: false

    - name: add certificate_generator container to inventory, as KC image is locked down (cannot use step ca bootstrap)
      add_host:
        name: certificate_generator
        ansible_connection: docker
      changed_when: false

# CA container is initialised through docker-compose env vars

    - name: obtain root CA cert fingerprint
      delegate_to: ca_holder
      raw: bash -c "step certificate fingerprint /home/step/certs/root_ca.crt"
      register: ca_fingerprint

    - debug: msg="{{ ca_fingerprint.stdout }}"

    - name: bootstrap certgen container with step-ca
      delegate_to: certificate_generator
      raw: step ca bootstrap --force --ca-url https://smallstep_ca:6783 --fingerprint {{ ca_fingerprint }} 2>&1 >/dev/null

# TODO: having issues installing the community.docker collection, will return to later
    - name: copy password file to certificate_generator for use in certgen
      delegate_to: certificate_generator
      raw: echo password > /tmp/password_file

# TODO: having issues installing the community.docker collection, will return to later
    - name: copy provisioner_password file to certificate_generator for use in certgen
      delegate_to: certificate_generator
      raw: echo password > /tmp/provisioner_password_file

    - name: generate certificate for keycloak container
      delegate_to: certificate_generator
      raw: bash -c "step ca certificate keycloak ~/keycloak.key ~/keycloak.crt -ca-url=https://smallstep_ca:6783 --password-file=/tmp/password_file --provisioner-password-file=/tmp/provisioner_password_file --san=localhost"

    - name: check keycloak cert
      delegate_to: certificate_generator
      raw: bash -c "step certificate inspect ~/keycloak.crt"
      
# root CA is initialisaed, now we use the certificate_generator container to generate the leaf cert and key for keycloak
#  - hosts: certificate_generator
#      community.docker.docker: step ca bootstrap --force --ca-url https://smallstep_ca:6783 --fingerprint $(cat ./fingerprint) 2>&1 >/dev/null

# - name: obtain cert for keycloak
#     community.docker.docker: step ca certificate keycloak ./keycloak.key ./keycloak.crt  -ca-url=https://smallstep_ca:6783 --password-file=/tmp/password_file --provisioner-password-file=/tmp/provisioner_password_file --san=keycloak --san=localhost

# - name: check cert
#     community.docker.docker: step certificate inspect ./keycloak.crt

# - name: obtain cert for image registry
#     community.docker.docker: step ca certificate registry ./registry.key ./registry.crt -ca-url=https://smallstep_ca:6783 --password-file=/tmp/password_file --provision-password-file=/tmp/provisioner_password_file --san=registry --san=localhost

# - name: check cert
#      community.docker.docker: step certificate inspect /.registry.crt

# - name: obtain cert for aspnet
#        community.docker.docker: step ca certificate ./aspnet_core.key ./aspnet_core.crt -ca-url=https://smallstep_ca:6783 --password-file=/tmp/password_file --provision-password-file=/tmp/provisioner_password_file --san=aspnet

# Now we copy the certificates into the keycloak container, import them into the keystore and start KC
# - hosts: keycloak

#   name: copy files
#      community.docker.docker: cp ./keycloak.crt /home/keycloak_certs/keycloak.crt
#      community.docker.docker: cp ./aspnet.crt /home/aspnet_certs/aspnet_core_copy.crt
#      community.docker.docker: sh: <
#KC
#echo "import KC cert, use pregenerated keystore"
#certAlias="keycloak$((1 + $RANDOM % 100))"
#echo "kc cert alias: $certAlias"
#echo "yes" | keytool -importcert -noprompt \
# -alias $certAlias \
# -file /home/keycloak_certs/keycloak.crt \
# -keystore /keycloak_keystore/keystore.jks \
# -storepass password \
# -keypass password \
# -keyalg RSA

#echo "import aspnet cert, use pregenerated keystore"
#echo "generating random alias for certificate import"
#certAlias="aspnet$((1 + $RANDOM % 100))"
#echo "aspnet cert alias: $certAlias"
#echo "yes" | keytool -importcert -noprompt \
# -alias $certAlias \
# -file /home/aspnet_certs/aspnet_core_copy.crt \
# -keystore /keycloak_keystore/keystore.jks \
# -storepass password \
# -keypass hello \
# -keyalg RSA

# name: start KC
#   community.docker.docker: 
#/opt/keycloak/bin/kc.sh start --log-level=warn --hostname-url=https://keycloak.example --https-certificate-file=/home/keycloak_certs/keycloak.crt --https-certificate-key-file=/home/keycloak_certs/keycloak.key --https-protocols=TLSv1.3,TLSv1.2 --import-realm 

# - hosts: aspnet
#   name: copy files
#      community.docker.docker: cp ./keycloak.crt /home/keycloak_certs/keycloak.crt
#      community.docker.docker: cp ./aspnet.crt /home/aspnet_certs/aspnet_core_copy.crt
#      community.docker.docker: sh: <

#echo "convert into pfx"
#openssl pkcs12 -export -out aspnet_core.pfx -inkey ./aspnet_core.key -in ./aspnet_core.crt -passin pass:hello -passout pass:hello

#echo "move into locations"

#mv aspnet_core.pfx /certs/aspnet_core.pfx

#echo "installing KC certificates..."
#cp /home/keycloak-certs/keycloak.crt /tmp/keycloak.crt

#cat /tmp/keycloak.crt >> /etc/ssl/certs/ca-certificates.crt
# run app
#cd /app

#echo "Running app..."
#dotnet KeycloakAuth.dll
