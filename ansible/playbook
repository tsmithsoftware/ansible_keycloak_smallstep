---
- hosts: all
  tasks:

# containers should be running but won't necessarily be in the inventory
# so we add them here

    - name: add smallstep CA container to inventory
      add_host:
        name: ca_holder
        ansible_connection: docker
        ansible_python_interpreter: /usr/bin/python3
      changed_when: false

    - name: add keycloak container to inventory
      add_host:
        name: keycloak
        ansible_connection: docker
        ansible_python_interpreter: /usr/bin/python3.9
      changed_when: false

    - name: add aspnet_app container to inventory
      add_host:
        name: aspnet_app
        ansible_connection: docker
        ansible_python_interpreter: /usr/bin/python3
      changed_when: false

    - name: add certificate_generator container to inventory, as KC image is locked down (cannot use step ca bootstrap)
      add_host:
        name: certificate_generator
        ansible_connection: docker
        ansible_python_interpreter: /usr/bin/python3.9
      changed_when: false

# CA container is initialised through docker-compose env vars

    - name: obtain root CA cert fingerprint
      delegate_to: ca_holder
      raw: bash -c "step certificate fingerprint /home/step/certs/root_ca.crt"
      register: ca_fingerprint

    - debug: msg="{{ ca_fingerprint.stdout[0:-1] }}"

    - name: copy password file to ca_holder to start CA
      delegate_to: ca_holder
      raw: echo password > /tmp/password_file

    - name: start step-ca container
      delegate_to: ca_holder
      raw: step-ca $(step path)/config/ca.json --password-file=/tmp/password_file </dev/null >/dev/null 2>&1 &

    - name: Check all port numbers are accessible from the current host
      wait_for:
        host: ca_holder
        port: "{{ item }}"
        state: started         # Port should be open
        delay: 0               # No wait before first check (sec)
        timeout: 3             # Stop checking after timeout (sec)
      ignore_errors: yes
      with_items:
        - 9000

    - name: bootstrap certgen container with step-ca
      delegate_to: certificate_generator
      raw: step ca bootstrap --force --ca-url https://ca_holder:9000 --fingerprint {{ ca_fingerprint.stdout[0:-1] }} 2>&1 >/dev/null

# TODO: having issues installing the community.docker collection, will return to later
    - name: copy password file to certificate_generator for use in certgen
      delegate_to: certificate_generator
      raw: echo password > /tmp/password_file

# TODO: having issues installing the community.docker collection, will return to later
    - name: copy provisioner_password file to certificate_generator for use in certgen
      delegate_to: certificate_generator
      raw: echo password > /tmp/provisioner_password_file

    - name: generate certificate for keycloak container
      delegate_to: certificate_generator
      raw: step ca certificate keycloak ~/keycloak.crt ~/keycloak.key -ca-url=https://ca_holder:9000 --password-file=/tmp/password_file --provisioner-password-file=/tmp/provisioner_password_file --san=localhost --san keycloak

    - name: check keycloak cert
      delegate_to: certificate_generator
      raw: step certificate inspect ~/keycloak.crt

    - name: generate certificate for aspnet_app application
      delegate_to: certificate_generator
      raw: step ca certificate aspnet_app ~/aspnet_app.crt ~/aspnet_app.key -ca-url=https://ca_holder:9000 --password-file=/tmp/password_file --provisioner-password-file=/tmp/provisioner_password_file --san localhost --san aspnet_app

    - name: check aspnet cert
      delegate_to: certificate_generator
      raw: step certificate inspect ~/aspnet_app.crt

# Now we copy the certificates into the keycloak container, import them into the keystore and start KC

    - name: Copy the keycloak certificate out of the container into the shared folder
      local_action:
        module: shell
        _raw_params: docker cp certificate_generator:/home/step/keycloak.crt ./kc_certs/keycloak.crt

    - name: Copy the keycloak key out of the container
      local_action:
        module: shell
        _raw_params: docker cp certificate_generator:/home/step/keycloak.key ./kc_certs/keycloak.key

# Do the same thing here with any .NET applications, but convert into .pfx first

    - name: Copy the dotnet certificate out of certificate_generator container and into local
      local_action:
        module: shell
        _raw_params: docker cp certificate_generator:/home/step/aspnet_app.crt ./aspnet_certs/aspnet_app.crt

    - name: Copy the dotnet certificate out of local and into python container
      local_action:
        module: shell
        _raw_params: docker cp ./aspnet_certs/aspnet_app.crt python:/aspnet_app.crt

    - name: Copy the dotnet key out of certificate_generator container and into python container
      local_action:
        module: shell
        _raw_params: docker cp certificate_generator:/home/step/aspnet_app.key ./aspnet_certs/aspnet_app.key

    - name: Copy the dotnet key out of local and into python container
      local_action:
        module: shell
        _raw_params: docker cp ./aspnet_certs/aspnet_app.key python:/aspnet_app.key

    - name: convert .NET certs into .pfx format
      delegate_to: python
      raw: openssl pkcs12 -export -out /aspnet_app.pfx -inkey /aspnet_app.key -in /aspnet_app.crt -passin pass:hello -passout pass:hello

    - name: Copy the .net certificate out of the container into the shared folder
      local_action:
        module: shell
        _raw_params: docker cp python:/aspnet_app.pfx ./aspnet_certs/aspnet_app.pfx

# Seems to be having trouble modifying the certificate after startup, so starting KC/ASP.NET container separately
    - name: Spin up KC / ASP.NET container
      local_action:
        module: shell
        _raw_params: docker-compose -f docker-compose-kc.yaml up -d
