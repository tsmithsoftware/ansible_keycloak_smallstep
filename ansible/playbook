---
- hosts: all
  tasks:

# containers should be running but won't necessarily be in the inventory
# so we add them here

    - name: add smallstep CA container to inventory
      add_host:
        name: ca_holder
        ansible_connection: docker
        ansible_python_interpreter: /usr/bin/python3
      changed_when: false

    - name: add keycloak container to inventory
      add_host:
        name: keycloak
        ansible_connection: docker
        ansible_python_interpreter: /usr/bin/python3.9
      changed_when: false

    - name: add aspnet_app container to inventory
      add_host:
        name: aspnet_app
        ansible_connection: docker
        ansible_python_interpreter: /usr/bin/python3
      changed_when: false

    - name: add certificate_generator container to inventory, as KC image is locked down (cannot use step ca bootstrap)
      add_host:
        name: certificate_generator
        ansible_connection: docker
        ansible_python_interpreter: /usr/bin/python3.9
      changed_when: false

# CA container is initialised through docker-compose env vars

    - name: obtain root CA cert fingerprint
      delegate_to: ca_holder
      raw: bash -c "step certificate fingerprint /home/step/certs/root_ca.crt"
      register: ca_fingerprint

    - debug: msg="{{ ca_fingerprint.stdout[0:-1] }}"

    - name: copy password file to ca_holder to start CA
      delegate_to: ca_holder
      raw: echo password > /tmp/password_file

    - name: start step-ca container
      delegate_to: ca_holder
      raw: step-ca $(step path)/config/ca.json --password-file=/tmp/password_file </dev/null >/dev/null 2>&1 &

    - name: Check all port numbers are accessible from the current host
      wait_for:
        host: ca_holder
        port: "{{ item }}"
        state: started         # Port should be open
        delay: 0               # No wait before first check (sec)
        timeout: 3             # Stop checking after timeout (sec)
      ignore_errors: yes
      with_items:
        - 9000

    - name: bootstrap certgen container with step-ca
      delegate_to: certificate_generator
      raw: step ca bootstrap --force --ca-url https://ca_holder:9000 --fingerprint {{ ca_fingerprint.stdout[0:-1] }} 2>&1 >/dev/null

# TODO: having issues installing the community.docker collection, will return to later
    - name: copy password file to certificate_generator for use in certgen
      delegate_to: certificate_generator
      raw: echo password > /tmp/password_file

# TODO: having issues installing the community.docker collection, will return to later
    - name: copy provisioner_password file to certificate_generator for use in certgen
      delegate_to: certificate_generator
      raw: echo password > /tmp/provisioner_password_file

    - name: generate certificate for keycloak container
      delegate_to: certificate_generator
      raw: step ca certificate keycloak ~/keycloak.crt ~/keycloak.key -ca-url=https://ca_holder:9000 --password-file=/tmp/password_file --provisioner-password-file=/tmp/provisioner_password_file --san=localhost --san keycloak

    - name: check keycloak cert
      delegate_to: certificate_generator
      raw: step certificate inspect ~/keycloak.crt

    - name: generate certificate for aspnet_app application
      delegate_to: certificate_generator
      raw: step ca certificate aspnet_app ~/aspnet_app.crt ~/aspnet_app.key -ca-url=https://ca_holder:9000 --password-file=/tmp/password_file --provisioner-password-file=/tmp/provisioner_password_file --san localhost --san aspnet_app

    - name: check aspnet cert
      delegate_to: certificate_generator
      raw: step certificate inspect ~/aspnet_app.crt

# Now we copy the certificates into the keycloak container, import them into the keystore and start KC

    - name: Copy the keycloak certificate out of the container
      local_action:
        module: shell
        _raw_params: docker cp certificate_generator:/home/step/keycloak.crt /tmp/keycloak.crt

    - name: Copy the keycloak key out of the container
      local_action:
        module: shell
        _raw_params: docker cp certificate_generator:/home/step/keycloak.key /tmp/keycloak.key

    - name: Copy the keycloak certificate into the keycloak container
      local_action:
        module: shell
        _raw_params: docker cp /tmp/keycloak.crt keycloak:/home/keycloak.crt

    - name: Copy the keycloak key into the keycloak container
      local_action:
        module: shell
        _raw_params: docker cp /tmp/keycloak.key keycloak:/home/keycloak.key

# Do the same thing here with any .NET applications

# Configuration 
    - name: Create keystore on KC container
      delegate_to: keycloak
      shell: "( echo user; echo OUnit; echo MyOrg; echo MyCity; echo MyState; echo GH; echo yes;) | keytool -genkey -noprompt -alias kcstore -keyalg RSA -keystore ~/keystore.jks -keysize 2048 -storepass password -keypass password"

    - name: Configure KC container to use the generated certificate
      delegate_to: keycloak
      shell: "echo 'yes' | keytool -importcert -noprompt -alias keycloak$((1 + $RANDOM % 100)) -file /home/keycloak.crt -keystore ~/keystore.jks -storepass password -keypass password -keyalg RSA"

    - name: Add aspnet certificate to KC container
      local_action:
        module: shell
        _raw_params: echo "todo"
   
    - name: start KC
      local_action:
        module: shell
        _raw_params: docker exec -d keycloak bash -c "/opt/keycloak/bin/kc.sh start --log-level=warn --hostname-url=https://keycloak.example --https-certificate-file=/home/keycloak.crt --https-certificate-key-file=/home/keycloak.key --https-protocols=TLSv1.3,TLSv1.2"

#    - name: start KC
 #     delegate_to: keycloak
  #    raw: nohup /opt/keycloak/bin/kc.sh start --log-level=warn --hostname-url=https://keycloak.example --https-certificate-file=/home/keycloak.crt --https-certificate-key-file=/home/keycloak.key --https-protocols=TLSv1.3,TLSv1.2 </dev/null >/dev/null 2>&1 & sleep 1 

   # - name: start KC
   #   delegate_to: keycloak
   #   shell: /bin/bash /tmp/exec.sh 2>&1 /dev/null
    #- name: Stop KC container
    #  local_action:
    #    module: shell
    #    _raw_params: docker stop keycloak

    #- name: Start KC container
    #  local_action:
    #    module: shell
    #    _raw_params: docker container start keycloak

# name: start KC
#   community.docker.docker: 
#/opt/keycloak/bin/kc.sh start --log-level=warn --hostname-url=https://keycloak.example --https-certificate-file=/home/keycloak_certs/keycloak.crt --https-certificate-key-file=/home/keycloak_certs/keycloak.key --https-protocols=TLSv1.3,TLSv1.2 --import-realm 

# - hosts: aspnet
#   name: copy files
#      community.docker.docker: cp ./keycloak.crt /home/keycloak_certs/keycloak.crt
#      community.docker.docker: cp ./aspnet.crt /home/aspnet_certs/aspnet_core_copy.crt
#      community.docker.docker: sh: <

#echo "convert into pfx"
#openssl pkcs12 -export -out aspnet_core.pfx -inkey ./aspnet_core.key -in ./aspnet_core.crt -passin pass:hello -passout pass:hello

#echo "move into locations"

#mv aspnet_core.pfx /certs/aspnet_core.pfx

#echo "installing KC certificates..."
#cp /home/keycloak-certs/keycloak.crt /tmp/keycloak.crt

#cat /tmp/keycloak.crt >> /etc/ssl/certs/ca-certificates.crt
# run app
#cd /app

#echo "Running app..."
#dotnet start
#dotnet KeycloakAuth.dll
