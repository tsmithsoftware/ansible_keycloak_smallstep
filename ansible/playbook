---
- hosts: all
  tasks:

# containers should be running but won't necessarily be in the inventory
# so we add them here

    - name: add smallstep CA container to inventory
      add_host: 
        name: ca_holder
        ansible_connection: docker
      changed_when: false

    - name: add keycloak container to inventory
      add_host:
        name: keycloak
        ansible_connection: docker
      changed_when: false

    - name: add certificate_generator container to inventory, as KC image is locked down (cannot use step ca bootstrap)
      add_host:
        name: certificate_generator
        ansible_connection: docker
      changed_when: false

# CA container is initialised through docker-compose env vars

    - name: obtain root CA cert fingerprint
      delegate_to: ca_holder
      raw: bash -c "step certificate fingerprint /home/step/certs/root_ca.crt"
      register: ca_fingerprint

    - debug: msg="{{ ca_fingerprint.stdout[0:-1] }}"

    - name: copy password file to ca_holder to start CA
      delegate_to: ca_holder
      raw: echo password > /tmp/password_file

    - name: start step-ca container
      delegate_to: ca_holder
      raw: step-ca $(step path)/config/ca.json --password-file=/tmp/password_file </dev/null >/dev/null 2>&1 &

    - name: Check all port numbers are accessible from the current host
      wait_for:
        host: ca_holder
        port: "{{ item }}"
        state: started         # Port should be open
        delay: 0               # No wait before first check (sec)
        timeout: 3             # Stop checking after timeout (sec)
      ignore_errors: yes
      with_items:
        - 9000

    - name: bootstrap certgen container with step-ca
      delegate_to: certificate_generator
      raw: step ca bootstrap --force --ca-url https://ca_holder:9000 --fingerprint {{ ca_fingerprint.stdout[0:-1] }} 2>&1 >/dev/null

# TODO: having issues installing the community.docker collection, will return to later
    - name: copy password file to certificate_generator for use in certgen
      delegate_to: certificate_generator
      raw: echo password > /tmp/password_file

# TODO: having issues installing the community.docker collection, will return to later
    - name: copy provisioner_password file to certificate_generator for use in certgen
      delegate_to: certificate_generator
      raw: echo password > /tmp/provisioner_password_file

    - name: generate certificate for keycloak container
      delegate_to: certificate_generator
      raw: step ca certificate keycloak ~/keycloak.crt ~/keycloak.key -ca-url=https://ca_holder:9000 --password-file=/tmp/password_file --provisioner-password-file=/tmp/provisioner_password_file --san=localhost --san keycloak

# check - invalid cert 
    - name: check keycloak cert
      delegate_to: certificate_generator
      raw: step certificate inspect ~/keycloak.crt

    - name: generate certificate for image registry
      delegate_to: certificate_generator
      raw: step ca certificate registry ~/registry.crt ~/registry.key -ca-url=https://ca_holder:9000 --password-file=/tmp/password_file --provisioner-password-file=/tmp/provisioner_password_file --san localhost --san registry

    - name: check registry cert
      delegate_to: certificate_generator
      raw: step certificate inspect ~/registry.crt

#    - name: generate certificate for aspnet application
#      delegate_to: certificate_generator
#      raw: step ca certificate aspnet ~/aspnet.key ~/aspnet.crt ca-url=https://ca_holder:9000 --password-file=/tmp/password_file --provisioner-password-file=/tmp/provisioner_password_file --san localhost --san aspnet

#    - name: check aspnet cert
#      delegate_to: certificate_generator
#      raw: step certificate inspect ~/aspnet.crt


# Now we copy the certificates into the keycloak container, import them into the keystore and start KC
# - hosts: keycloak

#   name: copy files
#      community.docker.docker: cp ./keycloak.crt /home/keycloak_certs/keycloak.crt
#      community.docker.docker: cp ./aspnet.crt /home/aspnet_certs/aspnet_core_copy.crt
#      community.docker.docker: sh: <
#KC
#echo "import KC cert, use pregenerated keystore"
#certAlias="keycloak$((1 + $RANDOM % 100))"
#echo "kc cert alias: $certAlias"
#echo "yes" | keytool -importcert -noprompt \
# -alias $certAlias \
# -file /home/keycloak_certs/keycloak.crt \
# -keystore /keycloak_keystore/keystore.jks \
# -storepass password \
# -keypass password \
# -keyalg RSA

#echo "import aspnet cert, use pregenerated keystore"
#echo "generating random alias for certificate import"
#certAlias="aspnet$((1 + $RANDOM % 100))"
#echo "aspnet cert alias: $certAlias"
#echo "yes" | keytool -importcert -noprompt \
# -alias $certAlias \
# -file /home/aspnet_certs/aspnet_core_copy.crt \
# -keystore /keycloak_keystore/keystore.jks \
# -storepass password \
# -keypass hello \
# -keyalg RSA

# name: start KC
#   community.docker.docker: 
#/opt/keycloak/bin/kc.sh start --log-level=warn --hostname-url=https://keycloak.example --https-certificate-file=/home/keycloak_certs/keycloak.crt --https-certificate-key-file=/home/keycloak_certs/keycloak.key --https-protocols=TLSv1.3,TLSv1.2 --import-realm 

# - hosts: aspnet
#   name: copy files
#      community.docker.docker: cp ./keycloak.crt /home/keycloak_certs/keycloak.crt
#      community.docker.docker: cp ./aspnet.crt /home/aspnet_certs/aspnet_core_copy.crt
#      community.docker.docker: sh: <

#echo "convert into pfx"
#openssl pkcs12 -export -out aspnet_core.pfx -inkey ./aspnet_core.key -in ./aspnet_core.crt -passin pass:hello -passout pass:hello

#echo "move into locations"

#mv aspnet_core.pfx /certs/aspnet_core.pfx

#echo "installing KC certificates..."
#cp /home/keycloak-certs/keycloak.crt /tmp/keycloak.crt

#cat /tmp/keycloak.crt >> /etc/ssl/certs/ca-certificates.crt
# run app
#cd /app

#echo "Running app..."
#dotnet KeycloakAuth.dll
